#!/usr/bin/python3

from sys import argv, stderr
import argparse, csv, sys
from operator import add
from math import factorial, sqrt, exp, pi

def man_help():
    print("USAGE")
    print("\t./207demography code [...]\n")
    print("DESCRIPTION")
    print("\tcode\tcountry code")
    exit(0)

def error(str: str) -> None:
    stderr.write(str)
    exit(84)
    
def error_handling(a):
    value = str(a)
    if len(value) != 3:
        error('Error : Wrong Country Code\n')
    return value

if (len(argv) == 2 and argv[1] == "-h"):
    man_help()

if len(sys.argv) > 1:
    parser = argparse.ArgumentParser(description='207demography')
    parser.add_argument('vars', nargs='+', type=error_handling)
else :
    error('Error : Invalid arguments.\n')

try:
    args = parser.parse_args()
except:
    exit(84)


data = []
country = []
tab = []
tmp1 = []
tmp2 = []
tmp3 = []
div = 1000000
path = "./207demography_data.csv"


def xy(data, date):
    return (sum(list(map(int, [data[i] * date[i] for i in range(min(len(data), len(date)))] + max(data, data, key=len)[min(len(data), len(date)):]))))


def square(data):
    return sum(list(map(int, [int(x)**2 for x in data])))

def linear_regression(data, date, type):
    c1 = sum(list(map(int, data))) 
    c2 = sum(list(map(int, date)))
    a = (c1 * square(date) - c2 * xy(data, date)) / (len(date) * square(date) - c2**2)
    b = (len(date) * xy(data, date) - c1 * c2) / (len(date) * square(date) -  c2**2)
    if type == 1:
        tab.append(a / div)
        tab.append(b / div)
    if type == 2:
        tab.append(a)
        tab.append(b * div)


def deviation(data, date, type):
    res = 0
    i = 0
    if type == 1:
        while i < len(date):
            res += (((date[i] * tab[1]) + tab[0]) - data[i] / div)**2
            i += 1
    if type == 2:
        while i < len(date):
            res += (((date[i] - tab[0]) / tab[1]) - data[i] / div)**2
            i += 1
    res /= len(date)
    return sqrt(res)

def fit1(date, data):
    sin = 1
    linear_regression(date, data, 1)
    tmp3.append(deviation(date, data, 1))
    print("Fit1")
    if tab[0] < 0:
        sin = -1
    print("\tY = {:.2f} X - {:.2f}".format(tab[1], tab[0] * sin))
    print("\tRoot-mean-square deviation: {:.2f}".format(deviation(date, data, 1)))
    print("\tPopulation in 2050: {:.2f}".format(2050 * tab[1] + tab[0]))
    tab.clear()


def fit2(date, data):
    sin = 1
    linear_regression(data, date, 2)
    tmp3.append(deviation(date, data, 2))
    print("Fit2")
    if tab[0] < 0:
        sin = -1
    print("\tX = {:.2f} Y + {:.2f}".format(tab[1], tab[0] * sin))
    print("\tRoot-mean-square deviation: {:.2f}".format(deviation(date, data, 2)))
    print("\tPopulation in 2050: {:.2f}".format((2050 - tab[0]) / tab[1]))
    tab.clear()


def parser(tmp1, tmp2):
    for j in data:
        for i in args.vars:
            if i == j[1]:
                country.append(j[0])
                if len(tmp1) == 0:
                    tmp1.extend(list(map(int, j[2:])))
                    tmp2.extend(list(map(int, data[0][2:])))
                else:
                    tmp1 = list(map(add, tmp1, list(map(int, j[2:]))))
    return tmp1

def print_country():
    print("Country:", ', '.join(country))
    
def correlation():
    res = tmp3[0] /tmp3[1]
    print("Correlation: {:.4f}".format(res))
    
def cvs_loader():
    with open(path, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        for row in reader:
            data.append(row)
        
if __name__ == "__main__":
    try :
        if len(argv) > 1:
            cvs_loader()
            tmp1 = parser(tmp1, tmp2)
            print_country()
            fit1(tmp1, tmp2)
            fit2(tmp1, tmp2)
            correlation()
        elif len(argv) <= 1 :
            error('Error : Invalid arguments.\n')
    except ValueError:
            error("Error : Not the right type of parameter !\n")